---
title: "Building Preprocessing Pipeline"
format: html
---

```{r}
```

```{r}
source("filtering_functions/Utils.R")
```
## Editing qc plots
```{r}
data_rep <- './sample_data/'
organism = "mfascicularis_gene_ensembl"
ensembl_version = 109

sobj <- load_and_annotate_recipe_1(data_rep, organism, ensembl_version)
show_QC_plots(sobj)
```

```{r}
preview_filtered_sobj(sobj, min_genes = 400, max_genes = 3000, max_pct_mito = 25)

```

```{r}
sobj <- commit_filtered_sobj(sobj, min_genes = 400, max_genes = 3000, max_pct_mito = 25)

```

# Loaading

```{r}
data_rep <- './sample_data'
organism = "mfascicularis_gene_ensembl"
ensembl_version = 109

sobj <- load_and_annotate_recipe_1(data_rep, organism, ensembl_version)

show_QC_plots(sobj)


preview_filtered_sobj(sobj, min_genes = 400, max_genes = 3000, max_pct_mito = 25)

show_QC_plots(preview_sobj)

sobj <- commit_filtered_sobj(sobj, min_genes = 400, max_genes = 3000, max_pct_mito = 25)

export_sobj (sobj, path = './test_skin_2.rds')

```
```{r}
data_type_options <- c('10X', 'rds')
input_type <-'10X'

data_rep <- './sample_data/'
sample_names <- list.files(data_rep)

if ("matrix.mtx.gz" %in% sample_names){
  sample_names <- c(basename(data_rep))
}
  
```

```{r}
preview_filtered_sobj <- function(sobj, min_genes = NULL, max_genes = NULL, 
                                  min_UMIs = NULL, max_UMIs = NULL, 
                                  max_pct_mito = NULL) {
  # returns a plot with showing QC plots of filtered data
  sobj <- filter_data(sobj, min_genes = NULL, max_genes = NULL, 
                                  min_UMIs = NULL, max_UMIs = NULL, 
                                  max_pct_mito = NULL)
  return(show_QC_plots(sobj))
}


filter_data


!is.null(min_genes)
  
  ?parese
sobj <- subset(sobj, subset = nFeature_RNA > 400 & nFeature_RNA < 4500 & percent.mt < 25)

dirname(data_rep)
list.files(dirname(data_rep)
)
```

```{r}

data_rep <- './sample_data/Skin_2/'
organism = "mfascicularis_gene_ensembl"
ensembl_version = 109


sample_names <- list.files(data_rep)

if ("matrix.mtx.gz" %in% sample_names){
  sample_name <- c(basename(data_rep))
  data_rep <- dirname(data_rep)
  
  sobj <- import_into_sobj(data_dir = file.path(data_rep, sample_name), project_name = sample_name)

}

  mito_genes <- get_mito_genes(organism, ensembl_version)

  # read and merge sobj
sobj_list = list()
for (sample_name in sample_names) {
  print(sample_name)
#  ## here would go things that are necessary to do in a sample independent manner, i.e. noise correction and doublet detection, which we are skipping for now
#  # Import data into seurat object
  sobj_temp <- import_into_sobj(data_dir = file.path(data_rep, sample_name), project_name = sample_name)
#
#  # Rename cell barcode names
  sobj_temp <- Seurat::RenameCells(sobj_temp, new.names = paste0(SeuratObject::Cells(sobj_temp), ".", sample_name))
#
#  # Append to list
  sobj_list[[sample_name]] <- sobj_temp
}
# Merge list
sobj <- merge(sobj_list[[1]], sobj_list[2:length(sobj_list)])
sobj <- SeuratObject::JoinLayers(sobj)  
  
  sobj[["percent.mt"]] <- Seurat::PercentageFeatureSet(sobj, features = mito_genes$ensembl_gene_id)

  return(sobj)
}
```

```{r}
library(patchwork)
top <- VlnPlot(sobj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

bottom_1 <- FeatureScatter(sobj, feature1 = "nCount_RNA", feature2 = "percent.mt")
bottom_2 <- FeatureScatter(sobj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")

top / (bottom_1 + bottom_2)
```



```{r}
sobj <- subset(sobj, subset = nFeature_RNA > 400 & nFeature_RNA < 4500 & percent.mt < 25)

```

```{r}
sobj <- NormalizeData(sobj, normalization.method = "LogNormalize", scale.factor = 10000)

```
```{r}
sobj <- FindVariableFeatures(sobj, selection.method = "vst", nfeatures = 2000)

```

```{r}
sobj <- ScaleData(sobj)
sobj <- RunPCA(sobj, features = VariableFeatures(object = sobj))

```
```{r}
DimPlot(sobj, reduction = "pca") + NoLegend()

```
```{r}
sobj <- FindNeighbors(sobj, dims = 1:10)
sobj <- FindClusters(sobj, resolution = 1)
```

```{r}
sobj <- RunUMAP(sobj, dims = 1:10)

```

```{r}
DimPlot(sobj, reduction = "umap")

```


```{r}
sobj <- subset(sobj, subset = nFeature_RNA > 400 & nFeature_RNA < 4500 & percent.mt < 25)

FeatureScatter(sobj, feature1 = "nCount_RNA", feature2 = "percent.mt")

saveRDS(sobj, file = 'processed_skin.rds')

GetAssayData(sobj, layer = 'RNA')

str(sobj@assays$RNA)

sobj[['RNA']]$counts
merged_sobj[['RNA']]$counts


merged_sobj <- JoinLayers(sobj)


merged_sobj
table(Idents(merged_sobj))

```


```{r}

```


```{r}
library(purrr)

sample_names <- setNames(sample_names, sample_names)
sample_directories <- map(sample_names, \(sample_name) file.path(data_rep, sample_name)) 


sobj_list <- map(sample_directories, \(sample_dir) import_into_sobj(sample_dir) )


sobj <- merge(sobj_list[[1]], sobj_list[2:length(sobj_list)])

Cells(sobj)
table(sobj$orig.ident)

```







```{r}
skin_1.data <- Seurat::Read10X(
    data.dir = file.path(data_rep, sample_names[1], 'Solo.out', 'Gene', 'filtered'), gene.column = 1
)

skin_1 <- CreateSeuratObject(counts = skin_1.data,  project = "skin_1")

skin_1[["percent.mt"]] <- PercentageFeatureSet(skin_1, features = mito_genes$ensembl_gene_id)

VlnPlot(skin_1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

plot1 <- FeatureScatter(skin_1, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(skin_1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

```



```{r}

```

